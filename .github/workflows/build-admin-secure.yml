name: Build Admin Secure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check secrets presence
        run: |
          test -n "${{ secrets.MATERIAL_BANNER_340_PRICE }}" || (echo "MATERIAL_BANNER_340_PRICE is EMPTY" && exit 1)
          test -n "${{ secrets.MATERIAL_BANNER_440_PRICE }}" || (echo "MATERIAL_BANNER_440_PRICE is EMPTY" && exit 1)
          test -n "${{ secrets.MATERIAL_BANNER_520_PRICE }}" || (echo "MATERIAL_BANNER_520_PRICE is EMPTY" && exit 1)
          test -n "${{ secrets.GROMMETS_CORNERS_PRICE }}" || (echo "GROMMETS_CORNERS_PRICE is EMPTY" && exit 1)
          test -n "${{ secrets.GROMMETS_PERIMETER_PRICE_PER_PIECE }}" || (echo "GROMMETS_PERIMETER_PRICE_PER_PIECE is EMPTY" && exit 1)
          test -n "${{ secrets.GROMMETS_PERIMETER_STEP }}" || (echo "GROMMETS_PERIMETER_STEP is EMPTY" && exit 1)
          test -n "${{ secrets.CUTTING_PRICE_PER_METER }}" || (echo "CUTTING_PRICE_PER_METER is EMPTY" && exit 1)
          test -n "${{ secrets.ADMIN_LOGIN }}" || (echo "ADMIN_LOGIN is EMPTY" && exit 1)
          test -n "${{ secrets.ADMIN_PASSWORD }}" || (echo "ADMIN_PASSWORD is EMPTY" && exit 1)

      - name: Prepare locks and encrypted prices from secrets
        env:
          ADMIN_LOGIN: ${{ secrets.ADMIN_LOGIN }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          MATERIAL_BANNER_340_PRICE: ${{ secrets.MATERIAL_BANNER_340_PRICE }}
          MATERIAL_BANNER_440_PRICE: ${{ secrets.MATERIAL_BANNER_440_PRICE }}
          MATERIAL_BANNER_520_PRICE: ${{ secrets.MATERIAL_BANNER_520_PRICE }}
          GROMMETS_CORNERS_PRICE: ${{ secrets.GROMMETS_CORNERS_PRICE }}
          GROMMETS_PERIMETER_PRICE_PER_PIECE: ${{ secrets.GROMMETS_PERIMETER_PRICE_PER_PIECE }}
          GROMMETS_PERIMETER_STEP: ${{ secrets.GROMMETS_PERIMETER_STEP }}
          CUTTING_PRICE_PER_METER: ${{ secrets.CUTTING_PRICE_PER_METER }}
        run: |
          set -e
          openssl rand -out admin-lock.salt 16
          node -e '
          const fs=require("fs"),crypto=require("crypto");

          const login=process.env.ADMIN_LOGIN||"", pass=process.env.ADMIN_PASSWORD||"";
          if(!login||!pass){console.error("Missing ADMIN_LOGIN or ADMIN_PASSWORD");process.exit(1)}

          const salt=fs.readFileSync("admin-lock.salt");
          const base=Buffer.from(`${login}:${pass}`,"utf8");
          const key=crypto.pbkdf2Sync(base,salt,200000,32,"sha256");

          function toNum(name) {
            const v = process.env[name];
            if (v===undefined || v===null || v==="") { console.error(`Missing ${name}`); process.exit(1); }
            const n = Number(v);
            if (!Number.isFinite(n)) { console.error(`Bad number in ${name}: ${v}`); process.exit(1); }
            return n;
          }

          const prices = {
            materials: [
              { id: "banner_340", name: "Баннер 300-340 г/м² (админ)", price: toNum("MATERIAL_BANNER_340_PRICE") },
              { id: "banner_440", name: "Баннер 440 г/м² (админ)", price: toNum("MATERIAL_BANNER_440_PRICE") },
              { id: "banner_520", name: "Литая 520 г/м² (админ)", price: toNum("MATERIAL_BANNER_520_PRICE") }
            ],
            grommets: {
              none: { name: "Без люверсов", price: 0 },
              corners: { name: "4 по углам", price: toNum("GROMMETS_CORNERS_PRICE") },
              perimeter: {
                name: "По периметру",
                pricePerPiece: toNum("GROMMETS_PERIMETER_PRICE_PER_PIECE"),
                step: toNum("GROMMETS_PERIMETER_STEP")
              }
            },
            cutting: { pricePerMeter: toNum("CUTTING_PRICE_PER_METER") }
          };

          function seal(obj,outFile){
            const iv=crypto.randomBytes(12);
            const cipher=crypto.createCipheriv("aes-256-gcm",key,iv);
            const pt=Buffer.from(JSON.stringify(obj),"utf8");
            const ct=Buffer.concat([cipher.update(pt), cipher.final()]);
            const tag=cipher.getAuthTag();
            fs.writeFileSync(outFile, Buffer.concat([iv, Buffer.concat([ct, tag])]));
          }

          seal({ok:true,v:1}, "admin-lock.json.enc");
          seal(prices, "admin-prices.json.enc");
          '

      - name: Debug list
        run: |
          pwd
          ls -la
          echo "--- admin files ---"
          ls -la admin.html admin.js crypto.js sw.js || true
          ls -la admin-lock.salt admin-lock.json.enc admin-prices.json.enc

      - name: Upload artifact to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
